{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","lottery","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","state","manager","players","balance","value","message","onSubmit","_callee","event","ethereum","accounts","_accounts","regenerator_default","a","wrap","_context","prev","next","preventDefault","enable","sent","_this","setState","methods","enter","send","from","utils","toWei","getAccounts","stop","onClick","_callee2","_accounts2","_context2","pickWinner","call","getPlayers","getBalance","options","address","this","_this2","react_default","createElement","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a689a239.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\nconst web3 = new Web3(window.web3.currentProvider);\r\n\r\nexport default web3;\r\n","import web3 from \"./web3\";\r\n\r\nconst address = \"0x221b723a2821b0c137e5aa5e36dd53b23d076946\";\r\n\r\nconst abi = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"manager\",\r\n    outputs: [{ name: \"\", type: \"address\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: \"pickWinner\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"getPlayers\",\r\n    outputs: [{ name: \"\", type: \"address[]\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: \"enter\",\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [{ name: \"\", type: \"uint256\" }],\r\n    name: \"players\",\r\n    outputs: [{ name: \"\", type: \"address\" }],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\"\r\n  },\r\n  {\r\n    inputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\"\r\n  }\r\n];\r\n\r\nexport default new web3.eth.Contract(abi, address);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport web3 from \"./web3\";\r\nimport lottery from \"./lottery\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    manager: \"\",\r\n    players: [],\r\n    balance: \"\",\r\n    value: \"\",\r\n    message: \"\"\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const manager = await lottery.methods.manager().call();\r\n    const players = await lottery.methods.getPlayers().call();\r\n    const balance = await web3.eth.getBalance(lottery.options.address);\r\n\r\n    this.setState({ manager, players, balance });\r\n  }\r\n\r\n  onSubmit = async event => {\r\n    event.preventDefault();\r\n    if (window.ethereum) {\r\n      const ethereum = window.ethereum;\r\n      const accounts = await ethereum.enable();\r\n      this.setState({ message: \"Waiting on transaction success...\" });\r\n      await lottery.methods.enter().send({\r\n        from: accounts[0],\r\n        value: web3.utils.toWei(this.state.value, \"ether\")\r\n      });\r\n    } else if (window.web3) {\r\n      const accounts = web3.eth.getAccounts();\r\n      this.setState({ message: \"Waiting on transaction success...\" });\r\n      await lottery.methods.enter().send({\r\n        from: accounts[0],\r\n        value: web3.utils.toWei(this.state.value, \"ether\")\r\n      });\r\n    } else {\r\n      this.setState({\r\n        message: \"Please install Metamask extension in your browser\"\r\n      });\r\n    }\r\n\r\n    this.setState({ message: \"You have been entered!\" });\r\n  };\r\n\r\n  onClick = async () => {\r\n    if (window.ethereum) {\r\n      const ethereum = window.ethereum;\r\n      const accounts = await ethereum.enable();\r\n      this.setState({ message: \"Waiting on transaction success...\" });\r\n      await lottery.methods.pickWinner().send({\r\n        from: accounts[0]\r\n      });\r\n    } else if (window.web3) {\r\n      const accounts = await web3.eth.getAccounts();\r\n      this.setState({ message: \"Waiting on transaction success...\" });\r\n      await lottery.methods.pickWinner().send({\r\n        from: accounts[0]\r\n      });\r\n    } else {\r\n      this.setState({\r\n        message: \"Please install Metamask extension in your browser\"\r\n      });\r\n    }\r\n    this.setState({ message: \"A winner has been picked!\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Lottery Contract</h2>\r\n        <p>This contract is managed by {this.state.manager}</p>\r\n        <p>\r\n          There are currently {this.state.players.length} people entered,\r\n          competing to win {web3.utils.fromWei(this.state.balance, \"ether\")}{\" \"}\r\n          ether!\r\n        </p>\r\n        <hr />\r\n        <form onSubmit={this.onSubmit}>\r\n          <h4>Want to try your luck?</h4>\r\n          <div>\r\n            <label>Amount of ether to enter</label>\r\n            <input\r\n              value={this.state.value}\r\n              onChange={event => this.setState({ value: event.target.value })}\r\n            />\r\n          </div>\r\n          <button>Enter</button>\r\n        </form>\r\n        <hr />\r\n        <h4>Ready to pick a winner?</h4>\r\n        <button onClick={this.onClick}>Pick a Winner!</button>\r\n        <hr />\r\n        <h1>{this.state.message}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}